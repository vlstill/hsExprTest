#!/usr/bin/env bash

BUILD=$PWD/_build
OUTDIR=$BUILD/tests
mkdir -p $OUTDIR
EXPR_TEST="$PYTHON $PWD/src/hs/driver"
cd $1

FAILED=""

MATCH=$2
function match() { true; }
test -n "$MATCH" && function match() { echo $1 | grep -q $MATCH; }

function check() {
    local GOT=$1
    local TEST=$2
    if echo $TEST | grep -wqF $GOT && ! grep '^W:' $4; then
        echo "passed"
    else
        echo "failed (got $GOT)"
        echo "LOG: "
        cat $4
        echo "TEST:"
        cat $TEST
        echo "OUTPUT: "
        cat $3
        FAILED="$FAILED $TEST"
    fi
}

function runtest() {
    local FILE=$1
    local BASE=$(echo $FILE | sed 's/\.q.*$/./')
    local INPUTS_=${BASE}*
    local INPUTS=$(echo $INPUTS_ | sed "s|$FILE||")

    if test ! -z $INPUTS 2>/dev/null && test -d $INPUTS; then
        INPUTS=$(find -L $INPUTS -type f)
    fi

    for T in $INPUTS; do
        match $T || continue
        local HINT=
        echo $T | fgrep -q .hint. && HINT="--hint"

        D=$(dirname $OUTDIR/$T)
        mkdir -p $D
        local OUT=$OUTDIR/$T.out
        local LOG=$OUTDIR/$T.log
        echo -n "${T}â€¦ "
        if $EXPR_TEST $FILE $T $HINT > $OUT 2> $LOG; then
            check "ok" $T $OUT $LOG
        else
            check "nok" $T $OUT $LOG
        fi
    done
}

while read F; do test -n "$F" && runtest $F; done <<< $(find -name '*.q.hs' ! -name '*.todo.*' | sort)
while read F; do test -n "$F" && echo "TODO: $F"; done <<< $(find -name '*.q.hs' -name '*.todo.*' | sort)

if test -n "$FAILED"; then
    echo "FAILED: $FAILED"
    exit 1
fi
