#!/usr/bin/env python3

import glob
import json
import os
import os.path
import sys
import itertools
import shutil
import subprocess
from datetime import datetime, timedelta
from dateutil.parser import parse as parse_date
if sys.version_info[0:2] >= (3, 9):
    from typing import Dict, List, Tuple, Any, Union, Final
else:
    from typing import Dict, List, Tuple, Any, Union
    from typing_extensions import Final

TEST_HS: Final = sys.argv[1]
SEM_END: Final = sys.argv[2]
DEST_DIR: Final = sys.argv[3]

def as_date(val: Union[datetime, int]) -> datetime:
    assert isinstance(val, datetime)
    return val


def as_int(val: Union[datetime, int]) -> int:
    assert isinstance(val, int)
    return val


def fragdate(date: Union[datetime, int]) -> str:
    return str(as_date(date)).replace("+01:00", " CET").replace("+02:00", " CEST")


config: Dict[str, Union[datetime, int]] = {}

config["semend"] = parse_date(SEM_END)

with open(TEST_HS, "r") as h:
    for ln in itertools.islice(h, 0, 16):
        if ln.startswith("-- @"):
            k, v = ln[4:].split(':', 1)
            k = k.strip().replace(' ', '_')
            v = v.strip()
            if k == "start" or k == "end" or k == "eval_start":
                config[k] = parse_date(v)
            else:
                config[k] = int(v)

if "eval_start" not in config:
    config["eval_start"] = config["start"]

grade_def = {"fail": 0, "group": "test", "name": "group"}

frag_assignment_config = {
    "files": ["Student.hs"],
    "eval-extra": ["../../hsExprTest/frag/common"],
    "eval-publish": [{"group": "test",
                      "start": fragdate(config["eval_start"]),
                      "anchor": fragdate(config["eval_start"]),
                      "interval": config["interval"],
                      "end": fragdate(config["semend"])}]}

ghc_env = glob.glob("../hsExprTest/_build/.ghc.environment.*")[0]
print(f"GHC_ENVIRONMENT={ghc_env}", file=sys.stderr)
os.environ["GHC_ENVIRONMENT"] = os.path.abspath(ghc_env)
r = subprocess.run(["runghc", "--ghc-arg=-i" + os.path.dirname(TEST_HS),
                    "--ghc-arg=-i../hsExprTest/frag/common",
                    "--ghc-arg=-i../hsExprTest/frag/support",
                    "--ghc-arg=-DIMPORT",
                    "--ghc-arg=-Wno-missing-methods",
                    "--ghc-arg=-fdefer-type-errors",
                    "../hsExprTest/frag/common/Main.hs", "--dump-tests"],
                   stdout=subprocess.PIPE, text=True)
assert r.returncode == 0
tests: List[Tuple[str, int]] = []
for ln in r.stdout.splitlines():
    stest, sweight = ln.split(',')
    tests.append((stest.strip(), int(sweight)))

TEST_TEMPLATE: Final = """\
#!/usr/bin/env bash
exec -a hstest sandbox "{TEST_NAME}"
"""


gendir = os.path.join(DEST_DIR, "_gen")
shutil.rmtree(gendir, ignore_errors=True)
if tests:
    total_weight = sum(w for _, w in tests)
    grade: List[Dict[str, Any]] = []
    for test, weight in tests:
        isgrace = timedelta(minutes=2)
        grade.append(grade_def |
            {"start": fragdate(config["start"]),
             "end": fragdate(as_date(config["end"]) + isgrace),
             "seq-min": 1,
             "seq-max": config["attempts"],
             "pass": (as_int(config["points"]) * weight) // total_weight,
             "name": test})

    total_pts = sum(e["pass"] for e in grade)
    diff_pts = as_int(config["points"]) - total_pts
    if diff_pts > 0:
        print('\033[91m'  # red
              f"W: Correcting points for {grade[-1]['name']} by {diff_pts} to "
              f"achieve sum {config['points']}"
              '\033[0m', file=sys.stderr)
        grade[-1]["pass"] += diff_pts

    frag_assignment_config["eval-grade"] = grade


def merge_in(a: Dict[str, Any], b: Dict[str, Any]):
    for k, v in b.items():
        if k not in a:
            a[k] = b[k]
        else:
            assert type(a[k]) == type(b[k])  # noqa
            if isinstance(a[k], dict):
                merge_in(a[k], b[k])
            else:
                assert False, f"could not merge {type(a[k])}"


try:
    with open(os.path.join(DEST_DIR, "assignment.part.json"), "r") as partH:
        part = json.load(partH)
        merge_in(frag_assignment_config, part)
except OSError:
    pass

with open(os.path.join(DEST_DIR, "assignment.json"), "w") as h:
    json.dump(frag_assignment_config, h, indent=True, ensure_ascii=False)

# vim: expandtab
